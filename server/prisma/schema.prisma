generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  email             String    @unique
  name              String
  role              UserRole  @default(USER)
  updatedAt         DateTime  @updatedAt
  profilePictureUrl String?
  phone             String?
  reviews           Review[]
}

model Country {
  id        String   @id @default(uuid())
  name      String
  iso2      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id              String           @id @default(uuid())
  name            String
  location        String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  latitude        Float? // Latitude for map integration
  longitude       Float? // Longitude for map integration
  phone           String?
  email           String?
  website         String?
  iconUrl         String?
  foundedYear     Int?
  web_validity    Boolean?
  capabilities    String?
  fb_handle       String?
  residential     Boolean?
  commercial      Boolean?
  distributor     Boolean?
  serviceAreas    String[]
  certifications  Certification[]
  partnerships    Partnership[]
  services        Service[]
  descriptions    Description[]
  reviews         Review[]
  projects        CompanyProject[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CompanyProject {
  id          String   @id @default(uuid())
  name        String   // Project name (e.g., "Smith Residence Solar Install")
  description String?  // Brief project overview
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  location    String?  // Project location (City, State)
  latitude    Float?   // Latitude for map integration
  longitude   Float?   // Longitude for map integration
  capacityKw  Float?   // Size of the solar system in kW
  completedAt DateTime? // Completion date
  photos      ProjectPhoto[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectPhoto {
  id        String   @id @default(uuid())
  url       String   // Link to the photo
  caption   String?  // Optional description
  projectId String
  project   CompanyProject @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certification {
  id         String   @id @default(uuid())
  name       String
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  issuedBy   String?
  issuedYear Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Partnership {
  id        String   @id @default(uuid())
  name      String
  type      String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String   @id @default(uuid())
  type      String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Description {
  id        String   @id @default(uuid())
  language  String
  text      String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             String                 @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime               @default(now())
  createdById    String
  status         ProjectStatus          @default(NOT_STARTED)
  updatedAt      DateTime               @updatedAt
  tasks          Task[]
  equipment      ProjectEquipment[]
  @@index([createdById])
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  dueDate      DateTime
  projectId    String
  assignedToId String
  createdAt    DateTime     @default(now())
  createdById  String
  updatedAt    DateTime     @updatedAt
  status       TaskStatus   @default(NOT_STARTED)
  priority     TaskPriority @default(MEDIUM)
  project      Project      @relation(fields: [projectId], references: [id])
}

model PVPanel {
  id                           String    @id @default(uuid())
  manufacturer                 String
  modelNumber                  String    @unique
  description                  String?
  safetyCertification          String?
  nameplateMaxPower            Float?
  ptcRating                    Float?
  notes                        String?
  designQualificationCert      String?
  performanceEvaluation        String?
  family                       String?
  technology                   String?
  activeArea                   Float?
  numberOfCells                Int?
  numberOfPanels               Int?
  bipv                         Boolean   @default(false)
  nameplateShortCircuitCurrent Float?
  nameplateOpenCircuitVoltage  Float?
  nameplateMaxCurrentAtPmax    Float?
  nameplateVoltageAtPmax       Float?
  averageNoct                  Float?
  tempCoeffPmax                Float?
  tempCoeffIsc                 Float?
  tempCoeffVoc                 Float?
  tempCoeffIpmax               Float?
  tempCoeffVpmax               Float?
  currentAtLowPower            Float?
  voltageAtLowPower            Float?
  currentAtNoct                Float?
  voltageAtNoct                Float?
  mountingType                 String?
  moduleType                   String?
  shortSide                    Float?
  longSide                     Float?
  geometricMultiplier          Float?
  performanceRatio             Float?
  cecListingDate               DateTime?
  lastUpdate                   DateTime?
  weight                       Float?
  framingMaterial              String?
  junctionBoxType              String?
  connectorType                String?
  performanceWarranty          String?
  productWarranty              String?
  projectEquipment ProjectEquipment[] @relation("ProjectPVPanel")

  @@index([manufacturer, modelNumber])
}

model Inverter {
  id                           String    @id @default(uuid())
  manufacturerName             String
  modelNumber                  String    @unique
  equipmentType                String?
  additionalRequiredDevices    String?
  currentMeasurementReference  String?
  description                  String?
  pcsIssuerEntity              String?
  pcsDocumentDate              DateTime?
  unrestrictedMode             Boolean   @default(false)
  exportOnlyMode               Boolean   @default(false)
  importOnlyMode               Boolean   @default(false)
  noExchangeMode               Boolean   @default(false)
  unrestrictedModeResponseTime Float?
  exportOnlyModeResponseTime   Float?
  importOnlyModeResponseTime   Float?
  noExchangeModeResponseTime   Float?
  phaseType                    String?
  outputVoltage                Float?
  maxContinuousCurrent         Float?
  maxContinuousPower           Float?
  notes                        String?
  pcsListingDate               DateTime?
  lastUpdate                   DateTime?
  inverterOrEss                String?

  projectEquipment ProjectEquipment[] @relation("ProjectInverter")

  @@index([manufacturerName, modelNumber])
}

model MountingHardware {
  id               String    @id @default(uuid())
  manufacturerName String
  modelNumber      String    @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?

  projectEquipment ProjectEquipment[] @relation("ProjectMountingHardware")

  @@index([manufacturerName, modelNumber])
}

model MiscEquipment {
  id               String    @id @default(uuid())
  manufacturerName String
  modelNumber      String    @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  projectEquipment ProjectEquipment[] @relation("ProjectMiscEquipment")

  @@index([manufacturerName, modelNumber])
}

model Wire {
  id               String    @id @default(uuid())
  manufacturerName String
  modelNumber      String    @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?

  projectEquipment ProjectEquipment[] @relation("ProjectWire")

  @@index([manufacturerName, modelNumber])
}

model ProjectEquipment {
  id            String        @id @default(uuid())
  projectId     String
  equipmentId   String
  pvPanelId     String?
  inverterId    String?
  mountingHardwareId   String?
  miscEquipmentId   String?
  wireId   String?
  equipmentType EquipmentType
  quantity      Int          @default(1)
  position      Json?        // Flexible JSON field for position/layout data
  specifications Json?        // For equipment-specific configuration
  project       Project      @relation(fields: [projectId], references: [id])
  pvPanel       PVPanel?     @relation("ProjectPVPanel", fields: [pvPanelId], references: [id])
  inverter      Inverter?    @relation("ProjectInverter", fields: [inverterId], references: [id])
  mountingHardware MountingHardware? @relation("ProjectMountingHardware", fields: [mountingHardwareId], references: [id])
  miscEquipment MiscEquipment? @relation("ProjectMiscEquipment", fields: [miscEquipmentId], references: [id])
  wire          Wire?        @relation("ProjectWire", fields: [wireId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([projectId, equipmentId, equipmentType])
  @@index([projectId])
  @@index([equipmentId])
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EquipmentType {
  PV_PANEL
  INVERTER
  MOUNTING_HARDWARE
  MISC_EQUIPMENT
  WIRE
}
