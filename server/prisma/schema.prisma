generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt         DateTime @default(now())
  email             String   @unique
  id                String   @id @default(uuid())
  name              String
  role              UserRole @default(USER)
  updatedAt         DateTime @updatedAt
  profilePictureUrl String?
  phone             String?
  reviews           Review[]
}

model Country {
  id        String   @id @default(uuid())
  name      String
  iso2      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id             String           @id @default(uuid())
  name           String
  location       String?
  website        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  iconUrl        String?
  address        String?
  city           String?
  country        String?
  email          String?
  foundedYear    Int?
  latitude       Float?
  longitude      Float?
  phone          String?
  serviceAreas   String[]
  state          String?
  zipCode        String?
  capabilities   String?
  commercial     Boolean?
  fb_handle      String?
  residential    Boolean?
  web_validity   Boolean?
  distributor    Boolean?
  certifications Certification[]
  projects       CompanyProject[]
  descriptions   Description[]
  partnerships   Partnership[]
  reviews        Review[]
  services       Service[]
}

model CompanyProject {
  id          String         @id @default(uuid())
  name        String
  description String?
  companyId   String
  location    String?
  latitude    Float?
  longitude   Float?
  capacityKw  Float?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  company     Company        @relation(fields: [companyId], references: [id])
  photos      ProjectPhoto[]
}

model ProjectPhoto {
  id        String         @id @default(uuid())
  url       String
  caption   String?
  projectId String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  project   CompanyProject @relation(fields: [projectId], references: [id])
}

model Certification {
  id         String   @id @default(uuid())
  name       String
  companyId  String
  issuedBy   String?
  issuedYear Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])
}

model Partnership {
  id        String   @id @default(uuid())
  name      String
  type      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
}

model Service {
  id        String   @id @default(uuid())
  type      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
}

model Description {
  id        String   @id @default(uuid())
  language  String
  text      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  companyId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String             @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime           @default(now())
  createdById String
  status      ProjectStatus      @default(NOT_STARTED)
  updatedAt   DateTime           @updatedAt
  equipment   ProjectEquipment[]
  tasks       Task[]

  @@index([createdById])
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  dueDate      DateTime
  projectId    String
  assignedToId String
  createdAt    DateTime     @default(now())
  createdById  String
  updatedAt    DateTime     @updatedAt
  status       TaskStatus   @default(NOT_STARTED)
  priority     TaskPriority @default(MEDIUM)
  project      Project      @relation(fields: [projectId], references: [id])
}

model PVPanel {
  id                        String             @id @default(uuid())
  manufacturer              String
  modelNumber               String             @unique
  description               String?
  safetyCertification       String?
  ptcRating                 Float?
  notes                     String?
  designQualificationCert   String?
  performanceEvaluation     String?
  family                    String?
  technology                String?
  activeArea                Float?
  numberOfCells             Int?
  numberOfPanels            Int?
  bipv                      Boolean            @default(false)
  nameplateMaxCurrentAtPmax Float?
  nameplateVoltageAtPmax    Float?
  averageNoct               Float?
  tempCoeffPmax             Float?
  tempCoeffIsc              Float?
  tempCoeffVoc              Float?
  tempCoeffIpmax            Float?
  tempCoeffVpmax            Float?
  currentAtLowPower         Float?
  voltageAtLowPower         Float?
  currentAtNoct             Float?
  voltageAtNoct             Float?
  mountingType              String?
  moduleType                String?
  shortSide                 Float?
  longSide                  Float?
  geometricMultiplier       Float?
  performanceRatio          Float?
  cecListingDate            DateTime?
  lastUpdate                DateTime?
  weight                    Float?
  framingMaterial           String?
  junctionBoxType           String?
  connectorType             String?
  performanceWarranty       String?
  productWarranty           String?
  efficiency                Float?
  openCircuitVoltage        Float?
  power                     Float?
  shortCircuitCurrent       Float?
  projectEquipment          ProjectEquipment[] @relation("ProjectPVPanel")

  @@index([manufacturer, modelNumber])
}

model Inverter {
  id                           String             @id @default(uuid())
  modelNumber                  String             @unique
  equipmentType                String?
  additionalRequiredDevices    String?
  currentMeasurementReference  String?
  description                  String?
  pcsIssuerEntity              String?
  pcsDocumentDate              DateTime?
  unrestrictedMode             Boolean            @default(false)
  exportOnlyMode               Boolean            @default(false)
  importOnlyMode               Boolean            @default(false)
  noExchangeMode               Boolean            @default(false)
  unrestrictedModeResponseTime Float?
  exportOnlyModeResponseTime   Float?
  importOnlyModeResponseTime   Float?
  noExchangeModeResponseTime   Float?
  phaseType                    String?
  outputVoltage                Float?
  maxContinuousCurrent         Float?
  maxContinuousPower           Float?
  notes                        String?
  pcsListingDate               DateTime?
  lastUpdate                   DateTime?
  inverterOrEss                String?
  manufacturer                 String?
  projectEquipment             ProjectEquipment[] @relation("ProjectInverter")

  @@index([manufacturer, modelNumber])
}

model MountingHardware {
  id               String             @id @default(uuid())
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  manufacturer     String
  projectEquipment ProjectEquipment[] @relation("ProjectMountingHardware")

  @@index([manufacturer, modelNumber])
}

model MiscEquipment {
  id               String             @id @default(uuid())
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  manufacturer     String
  projectEquipment ProjectEquipment[] @relation("ProjectMiscEquipment")

  @@index([manufacturer, modelNumber])
}

model Wire {
  id               String             @id @default(uuid())
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  manufacturer     String
  projectEquipment ProjectEquipment[] @relation("ProjectWire")

  @@index([manufacturer, modelNumber])
}

model ProjectEquipment {
  id                 String            @id @default(uuid())
  projectId          String
  equipmentId        String
  pvPanelId          String?
  inverterId         String?
  mountingHardwareId String?
  miscEquipmentId    String?
  wireId             String?
  equipmentType      EquipmentType
  quantity           Int               @default(1)
  position           Json?
  specifications     Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  inverter           Inverter?         @relation("ProjectInverter", fields: [inverterId], references: [id])
  miscEquipment      MiscEquipment?    @relation("ProjectMiscEquipment", fields: [miscEquipmentId], references: [id])
  mountingHardware   MountingHardware? @relation("ProjectMountingHardware", fields: [mountingHardwareId], references: [id])
  project            Project           @relation(fields: [projectId], references: [id])
  pvPanel            PVPanel?          @relation("ProjectPVPanel", fields: [pvPanelId], references: [id])
  wire               Wire?             @relation("ProjectWire", fields: [wireId], references: [id])

  @@unique([projectId, equipmentId, equipmentType])
  @@index([projectId])
  @@index([equipmentId])
}

model Survey {
  id              String           @id @default(uuid())
  title           String
  description     String
  surveyJson      String
  userId          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expiresAt       DateTime?
  status          SurveyStatus     @default(DRAFT)
  targetResponses Int              @default(0)
  responses       SurveyResponse[]

  @@index([userId])
  @@map("surveys")
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  createdAt    DateTime @default(now())
  responseJson Json
  updatedAt    DateTime @updatedAt
  userId       String
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
  @@map("responses")
}

enum UserRole {
  ADMIN
  USER
}

enum SurveyStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EquipmentType {
  PV_PANEL
  INVERTER
  MOUNTING_HARDWARE
  MISC_EQUIPMENT
  WIRE
}
