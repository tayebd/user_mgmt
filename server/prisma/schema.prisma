generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt         DateTime  @default(now())
  email             String    @unique
  id                String    @id
  name              String
  role              UserRole  @default(USER)
  updatedAt         DateTime  @updatedAt
  profilePictureUrl String?
  phone             String?
  contacts          Contact[] @relation("UserContacts")
  projects          Project[] @relation("ProjectCreator")
  tasks             Task[]    @relation("TaskAssignee")
  createdTasks      Task[]    @relation("TaskCreator")
}

model Project {
  id             String                 @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime               @default(now())
  createdById    String
  status         ProjectStatus          @default(NOT_STARTED)
  updatedAt      DateTime               @updatedAt
  events         Event[]
  files          File[]
  createdBy      User                   @relation("ProjectCreator", fields: [createdById], references: [id])
  contacts       ProjectContact[]
  roles          ProjectRole[]
  tags           ProjectTag[]
  utilityTariffs ProjectUtilityTariff[]
  systems        System[]
  tasks          Task[]
  testimonials   Testimonial[]
  transactions   Transaction[]

  @@index([createdById])
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  dueDate      DateTime
  projectId    String
  assignedToId String
  createdAt    DateTime     @default(now())
  createdById  String
  updatedAt    DateTime     @updatedAt
  status       TaskStatus   @default(NOT_STARTED)
  priority     TaskPriority @default(MEDIUM)
  assignedTo   User         @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy    User         @relation("TaskCreator", fields: [createdById], references: [id])
  project      Project      @relation(fields: [projectId], references: [id])
}

model Org {
  id                String             @id @default(uuid())
  name              String
  apiKey            String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  components        Component[]
  contacts          Contact[]
  contractTemplates ContractTemplate[]
  costings          Costing[]
  designSettings    DesignSetting[]
  documentTemplates DocumentTemplate[]
  eventTypes        EventType[]
  incentives        Incentive[]
  leadCaptureForms  LeadCaptureForm[]
  settings          OrgSettings[]
  paymentOptions    PaymentOption[]
  pricingSchemes    PricingScheme[]
  proposalTemplates ProposalTemplate[]
  roles             Role[]
  roofTypes         RoofType[]
  tags              Tag[]
  team              Team[]
  utilityTariffs    UtilityTariff[]
}

model Contact {
  id                 String           @id @default(uuid())
  firstName          String
  lastName           String
  email              String?
  phone              String?
  type               ContactType      @default(INDIVIDUAL)
  identifier         String?          @unique
  licenceNumber      String?          @unique
  customContactInfo1 String?
  customContactInfo2 String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  orgId              String
  userId             String?
  org                Org              @relation(fields: [orgId], references: [id])
  user               User?            @relation("UserContacts", fields: [userId], references: [id])
  projects           ProjectContact[]

  @@index([orgId])
  @@index([userId])
}

model ProjectContact {
  projectId String
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@id([projectId, contactId])
  @@index([projectId])
  @@index([contactId])
}

model Role {
  id           String        @id @default(uuid())
  name         String
  email        String?
  phone        String?
  roleType     RoleType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orgId        String
  projectRoles ProjectRole[]
  org          Org           @relation(fields: [orgId], references: [id])
  team         Team[]
}

model ProjectRole {
  projectId      String
  roleId         String
  assignmentType AssignmentType
  project        Project        @relation(fields: [projectId], references: [id])
  role           Role           @relation(fields: [roleId], references: [id])

  @@id([projectId, roleId])
  @@index([projectId])
  @@index([roleId])
}

model System {
  id               String   @id @default(uuid())
  systemType       String
  capacity         Float
  annualProduction Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  projectId        String
  project          Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Event {
  id          String    @id @default(uuid())
  date        DateTime
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  eventTypeId String
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([eventTypeId])
}

model File {
  id        String   @id @default(uuid())
  fileType  FileType
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model UtilityTariff {
  id            String                 @id @default(uuid())
  tariffDetails Json
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  orgId         String
  projects      ProjectUtilityTariff[]
  org           Org                    @relation(fields: [orgId], references: [id])
}

model ProjectUtilityTariff {
  projectId       String
  utilityTariffId String
  tariffType      TariffType
  project         Project       @relation(fields: [projectId], references: [id])
  utilityTariff   UtilityTariff @relation(fields: [utilityTariffId], references: [id])

  @@id([projectId, utilityTariffId])
  @@index([projectId])
  @@index([utilityTariffId])
}

model Workflow {
  id            String          @id @default(uuid())
  workflowId    String          @unique
  activeStageId String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stages        WorkflowStage[]
}

model Team {
  orgId  String
  roleId String
  org    Org    @relation(fields: [orgId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([orgId, roleId])
  @@index([orgId])
  @@index([roleId])
}

model OrgSettings {
  orgId        String
  settingKey   String
  settingValue String
  org          Org    @relation(fields: [orgId], references: [id])

  @@id([orgId, settingKey])
  @@index([orgId])
}

model PricingScheme {
  id            String   @id @default(uuid())
  schemeDetails Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orgId         String
  org           Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model PaymentOption {
  id            String   @id @default(uuid())
  optionDetails Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orgId         String
  org           Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Costing {
  id             String   @id @default(uuid())
  costingDetails Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orgId          String
  org            Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model DesignSetting {
  id             String   @id @default(uuid())
  settingType    String
  settingDetails Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orgId          String
  org            Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Component {
  id            String        @id @default(uuid())
  componentType ComponentType
  details       Json
  isCustom      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orgId         String
  org           Org           @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Incentive {
  id               String   @id @default(uuid())
  incentiveDetails Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orgId            String
  org              Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model DocumentTemplate {
  id              String   @id @default(uuid())
  templateName    String
  templateContent String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orgId           String
  org             Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model LeadCaptureForm {
  id          String   @id @default(uuid())
  formDetails Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model EventType {
  id        String   @id @default(uuid())
  typeName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orgId     String
  events    Event[]
  org       Org      @relation(fields: [orgId], references: [id])
}

model RoofType {
  id        String   @id @default(uuid())
  typeName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orgId     String
  org       Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model WorkflowStage {
  id         String   @id @default(uuid())
  title      String
  milestone  Boolean  @default(false)
  order      Int
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  workflowId String
  actions    Action[]
  workflow   Workflow @relation(fields: [workflowId], references: [workflowId])
}

model Action {
  id              String        @id @default(uuid())
  title           String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workflowStageId String
  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])

  @@index([workflowStageId])
}

model Country {
  id        String   @id @default(uuid())
  name      String
  iso2      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Transaction {
  id                 String   @id @default(uuid())
  transactionDetails Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  projectId          String
  project            Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ContractTemplate {
  id              String   @id @default(uuid())
  templateContent String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orgId           String
  org             Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model ProposalTemplate {
  id              String   @id @default(uuid())
  templateContent String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orgId           String
  org             Org      @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Tag {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  orgId     String
  projects  ProjectTag[]
  org       Org          @relation(fields: [orgId], references: [id])
}

model ProjectTag {
  projectId String
  tagId     String
  project   Project @relation(fields: [projectId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
}

model EnergyStorageSystem {
  id                                           String    @id @default(uuid())
  manufacturerName                             String
  brand                                        String?
  modelNumber                                  String    @unique
  technology                                   String?
  pvDcInputCapability                          Boolean   @default(false)
  ul9540CertifyingEntity                       String?
  ul9540CertificateDate                        DateTime?
  ul9540Edition                                String?
  ul1741SupplementSbCertification              Boolean   @default(false)
  ul1741SupplementSaTesting                    Boolean   @default(false)
  ul1741Sa13VoltVar                            Boolean   @default(false)
  ul1741SaFreqWattVoltWatt                     Boolean   @default(false)
  ul1741SaDisablePermitServiceLimitActivePower Boolean   @default(false)
  commonSmartInverterProfileConformance        Boolean   @default(false)
  monitorKeyDataScheduling                     Boolean   @default(false)
  description                                  String?
  nameplateEnergyCapacity                      Float?
  nameplatePower                               Float?
  nominalVoltage                               Float?
  maximumContinuousDischargeRate               Float?
  ul1741SupplementSbCertifyingEntity           String?
  ul1741SupplementSbCertificateDate            DateTime?
  ul1741SupplementSaCertifyingEntity           String?
  ul1741SupplementSaCertificateDate            DateTime?
  firmwareVersionsTested                       String?
  inverterCsipConformance                      Boolean   @default(false)
  monitorKeyDataSchedulingAttestation          Boolean   @default(false)
  manufacturerDeclaredRoundtripEfficiency      Float?
  certifiedJa12ControlStrategies               Boolean   @default(false)
  declarationForJa12Submitted                  Boolean   @default(false)
  notes                                        String?
  cecListingDate                               DateTime?
  lastUpdate                                   DateTime?

  @@index([manufacturerName, modelNumber])
}

model Inverter {
  id                           String    @id @default(uuid())
  manufacturerName             String
  modelNumber                  String    @unique
  equipmentType                String?
  additionalRequiredDevices    String?
  currentMeasurementReference  String?
  description                  String?
  pcsIssuerEntity              String?
  pcsDocumentDate              DateTime?
  unrestrictedMode             Boolean   @default(false)
  exportOnlyMode               Boolean   @default(false)
  importOnlyMode               Boolean   @default(false)
  noExchangeMode               Boolean   @default(false)
  unrestrictedModeResponseTime Float?
  exportOnlyModeResponseTime   Float?
  importOnlyModeResponseTime   Float?
  noExchangeModeResponseTime   Float?
  phaseType                    String?
  outputVoltage                Float?
  maxContinuousCurrent         Float?
  maxContinuousPower           Float?
  notes                        String?
  pcsListingDate               DateTime?
  lastUpdate                   DateTime?
  inverterOrEss                String?

  @@index([manufacturerName, modelNumber])
}

model PVModule {
  id                           String    @id @default(uuid())
  manufacturer                 String
  modelNumber                  String    @unique
  description                  String?
  safetyCertification          String?
  nameplateMaxPower            Float?
  ptcRating                    Float?
  notes                        String?
  designQualificationCert      String?
  performanceEvaluation        String?
  family                       String?
  technology                   String?
  activeArea                   Float?
  numberOfCells                Int?
  numberOfPanels               Int?
  bipv                         Boolean   @default(false)
  nameplateShortCircuitCurrent Float?
  nameplateOpenCircuitVoltage  Float?
  nameplateMaxCurrentAtPmax    Float?
  nameplateVoltageAtPmax       Float?
  averageNoct                  Float?
  tempCoeffPmax                Float?
  tempCoeffIsc                 Float?
  tempCoeffVoc                 Float?
  tempCoeffIpmax               Float?
  tempCoeffVpmax               Float?
  currentAtLowPower            Float?
  voltageAtLowPower            Float?
  currentAtNoct                Float?
  voltageAtNoct                Float?
  mountingType                 String?
  moduleType                   String?
  shortSide                    Float?
  longSide                     Float?
  geometricMultiplier          Float?
  performanceRatio             Float?
  cecListingDate               DateTime?
  lastUpdate                   DateTime?

  @@index([manufacturer, modelNumber])
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactType {
  INDIVIDUAL
  BUSINESS
  VENDOR
  CLIENT
  OTHER
}

enum RoleType {
  TEAM_MEMBER
  SITE_INSPECTOR
  INSTALLER
  DESIGNER
  SALESPERSON
}

enum AssignmentType {
  ASSIGNED_ROLE
  ASSIGNED_INSTALLER
  ASSIGNED_SITE_INSPECTOR
  ASSIGNED_DESIGNER
  ASSIGNED_SALESPERSON
}

enum FileType {
  PRIVATE
  PUBLIC
}

enum TariffType {
  CURRENT
  PROPOSED
}

enum ComponentType {
  MODULE
  INVERTER
  BATTERY
  OTHER
}
