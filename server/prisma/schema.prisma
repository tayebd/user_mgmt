// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id              String   @id // Using Firebase UID as the primary key
  email           String   @unique
  name            String
  role            UserRole @default(USER)
  profilePictureUrl String?
  phone           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  projects      Project[] @relation("ProjectCreator")
  tasks         Task[]    @relation("TaskAssignee")
  createdTasks  Task[]    @relation("TaskCreator")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus @default(NOT_STARTED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  createdBy    User   @relation("ProjectCreator", fields: [createdById], references: [id])
  createdById  String
  tasks        Task[]
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  status      TaskStatus  @default(NOT_STARTED)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  assignedTo  User     @relation("TaskAssignee", fields: [assignedToId], references: [id])
  assignedToId String
  createdBy   User     @relation("TaskCreator", fields: [createdById], references: [id])
  createdById String
}
