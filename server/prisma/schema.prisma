generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt         DateTime         @default(now())
  email             String           @unique
  name              String
  role              UserRole         @default(USER)
  updatedAt         DateTime         @updatedAt
  profilePictureUrl String?
  phone             String?
  creatorId         Int?
  id                Int              @id @default(autoincrement())
  uid               String           @unique @default(uuid())
  Review            Review[]
  Task              Task[]           @relation("TaskAssignee")
  SurveyResponse    SurveyResponse[] @relation("SurveyResponseUser")
  Survey            Survey[]         @relation("SurveyCreator")
}

model Country {
  name      String
  iso2      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
}

model Company {
  name           String          @unique
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  iconUrl        String?
  address        String?
  city           String?
  country        String?
  email          String?
  foundedYear    Int?
  latitude       Float?
  longitude      Float?
  phone          String?
  serviceAreas   String[]
  state          String?
  capabilities   String?
  commercial     Boolean?
  fb_handle      String?
  residential    Boolean?
  web_validity   Boolean?
  distributor    Boolean?
  id             Int             @id @default(autoincrement())
  fax            String?
  industryId     Int             @default(72)
  postalCode     String?
  certifications Certification[]
  industry       Industry        @relation(fields: [industryId], references: [id])
  projects       CompanyProject[]
  descriptions   Description[]
  partnerships   Partnership[]
  reviews        Review[]
  services       Service[]
}

model Industry {
  name        String
  description String
  id          Int       @id @default(autoincrement())
  companies   Company[]
}

model CompanyProject {
  name        String
  description String?
  address    String?
  latitude    Float?
  longitude   Float?
  capacityKw  Float?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  id          Int            @id @default(autoincrement())
  companyId   Int            @unique
  company     Company        @relation(fields: [companyId], references: [id])
  photos      ProjectPhoto[]
}

model ProjectPhoto {
  url       String
  caption   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  id        Int            @id @default(autoincrement())
  projectId Int
  project   CompanyProject @relation(fields: [projectId], references: [id])
}

model Certification {
  name       String
  issuedBy   String?
  issuedYear Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         Int      @id @default(autoincrement())
  companyId  Int
  company    Company  @relation(fields: [companyId], references: [id])
}

model Partnership {
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Service {
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Description {
  language  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Review {
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  userId    Int
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime           @default(now())
  status      ProjectStatus      @default(NOT_STARTED)
  updatedAt   DateTime           @updatedAt
  id          Int                @id @default(autoincrement())
  memberIds   Int[]
  equipment   ProjectEquipment[]
  tasks       Task[]
}

model Task {
  title        String
  description  String?
  dueDate      DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       TaskStatus   @default(NOT_STARTED)
  priority     TaskPriority @default(MEDIUM)
  id           Int          @id @default(autoincrement())
  projectId    Int
  assignedToId Int
  assignedTo   User         @relation("TaskAssignee", fields: [assignedToId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id])
}

model PVPanel {
  manufacturer              String
  modelNumber               String             @unique
  description               String?
  safetyCertification       String?
  ptcRating                 Float?
  notes                     String?
  designQualificationCert   String?
  performanceEvaluation     String?
  family                    String?
  technology                String?
  activeArea                Float?
  numberOfCells             Int?
  numberOfPanels            Int?
  bipv                      Boolean            @default(false)
  nameplateMaxCurrentAtPmax Float?
  nameplateVoltageAtPmax    Float?
  averageNoct               Float?
  tempCoeffPmax             Float?
  tempCoeffIsc              Float?
  tempCoeffVoc              Float?
  tempCoeffIpmax            Float?
  tempCoeffVpmax            Float?
  currentAtLowPower         Float?
  voltageAtLowPower         Float?
  currentAtNoct             Float?
  voltageAtNoct             Float?
  mountingType              String?
  moduleType                String?
  shortSide                 Float?
  longSide                  Float?
  geometricMultiplier       Float?
  performanceRatio          Float?
  cecListingDate            DateTime?
  weight                    Float?
  framingMaterial           String?
  junctionBoxType           String?
  connectorType             String?
  performanceWarranty       String?
  productWarranty           String?
  efficiency                Float?
  openCircuitVoltage        Float?
  shortCircuitCurrent       Float?
  maxPower                  Float?
  id                        Int                @id @default(autoincrement())
  projectEquipment          ProjectEquipment[] @relation("ProjectPVPanel")

  @@index([manufacturer, modelNumber])
}

model Inverter {
  modelNumber                  String             @unique
  equipmentType                String?
  additionalRequiredDevices    String?
  currentMeasurementReference  String?
  description                  String?
  pcsIssuerEntity              String?
  pcsDocumentDate              DateTime?
  unrestrictedMode             Boolean            @default(false)
  exportOnlyMode               Boolean            @default(false)
  importOnlyMode               Boolean            @default(false)
  noExchangeMode               Boolean            @default(false)
  unrestrictedModeResponseTime Float?
  exportOnlyModeResponseTime   Float?
  importOnlyModeResponseTime   Float?
  noExchangeModeResponseTime   Float?
  phaseType                    String?
  outputVoltage                Float?
  notes                        String?
  pcsListingDate               DateTime?
  lastUpdate                   DateTime?
  inverterOrEss                String?
  manufacturer                 String?
  maxCurrent                   Float?
  maxPower                     Float?
  id                           Int                @id @default(autoincrement())
  projectEquipment             ProjectEquipment[] @relation("ProjectInverter")

  @@index([manufacturer, modelNumber])
}

model MountingHardware {
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  manufacturer     String
  id               Int                @id @default(autoincrement())
  projectEquipment ProjectEquipment[] @relation("ProjectMountingHardware")

  @@index([manufacturer, modelNumber])
}

model MiscEquipment {
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  manufacturer     String
  id               Int                @id @default(autoincrement())
  projectEquipment ProjectEquipment[] @relation("ProjectMiscEquipment")

  @@index([manufacturer, modelNumber])
}

model Wire {
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  notes            String?
  cecListingDate   DateTime?
  lastUpdate       DateTime?
  manufacturer     String
  id               Int                @id @default(autoincrement())
  projectEquipment ProjectEquipment[] @relation("ProjectWire")

  @@index([manufacturer, modelNumber])
}

model ProjectEquipment {
  equipmentType      EquipmentType
  quantity           Int               @default(1)
  position           Json?
  specifications     Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  id                 Int               @id @default(autoincrement())
  projectId          Int
  equipmentId        Int
  pvPanelId          Int?
  inverterId         Int?
  mountingHardwareId Int?
  miscEquipmentId    Int?
  wireId             Int?
  inverter           Inverter?         @relation("ProjectInverter", fields: [inverterId], references: [id])
  miscEquipment      MiscEquipment?    @relation("ProjectMiscEquipment", fields: [miscEquipmentId], references: [id])
  mountingHardware   MountingHardware? @relation("ProjectMountingHardware", fields: [mountingHardwareId], references: [id])
  project            Project           @relation(fields: [projectId], references: [id])
  pvPanel            PVPanel?          @relation("ProjectPVPanel", fields: [pvPanelId], references: [id])
  wire               Wire?             @relation("ProjectWire", fields: [wireId], references: [id])

  @@unique([projectId, equipmentId, equipmentType])
  @@index([projectId])
  @@index([equipmentId])
}

model Survey {
  title           String
  description     String
  surveyJson      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expiresAt       DateTime?
  status          SurveyStatus     @default(DRAFT)
  targetResponses Int              @default(0)
  id              Int              @id @default(autoincrement())
  userId          Int
  responses       SurveyResponse[]
  user            User             @relation("SurveyCreator", fields: [userId], references: [id])

  @@index([userId])
  @@map("surveys")
}

model SurveyResponse {
  createdAt    DateTime @default(now())
  responseJson Json
  updatedAt    DateTime @updatedAt
  id           Int      @id @default(autoincrement())
  surveyId     Int
  userId       Int
  survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user         User     @relation("SurveyResponseUser", fields: [userId], references: [id])

  @@index([surveyId])
  @@map("responses")
}

enum UserRole {
  ADMIN
  USER
}

enum SurveyStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EquipmentType {
  PV_PANEL
  INVERTER
  MOUNTING_HARDWARE
  MISC_EQUIPMENT
  WIRE
}
