generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt         DateTime         @default(now())
  email             String           @unique
  name              String
  role              UserRole         @default(USER)
  updatedAt         DateTime         @updatedAt
  profilePictureUrl String?
  phone             String?
  creatorId         Int?
  id                Int              @id @default(autoincrement())
  uid               String           @unique @default(uuid())
  Review            Review[]
  Task              Task[]           @relation("TaskAssignee")
  SurveyResponse    SurveyResponse[] @relation("SurveyResponseUser")
  Survey            Survey[]         @relation("SurveyCreator")
}

model Country {
  name      String
  iso2      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
}

model Company {
  name                      String                     @unique
  website                   String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  iconUrl                   String?
  address                   String?
  city                      String?
  country                   String?
  email                     String?
  foundedYear               Int?
  latitude                  Float?
  longitude                 Float?
  phone                     String?
  serviceAreas              String[]
  state                     String?
  capabilities              String?
  commercial                Boolean?
  fb_handle                 String?
  residential               Boolean?
  web_validity              Boolean?
  distributor               Boolean?
  id                        Int                        @id @default(autoincrement())
  fax                       String?
  industryId                Int                        @default(72)
  postalCode                String?
  certifications            Certification[]
  industry                  Industry                   @relation(fields: [industryId], references: [id])
  projects                  CompanyProject[]
  descriptions              Description[]
  digitalProcesses          DigitalProcess[]
  partnerships              Partnership[]
  personnelSkills           PersonnelSkill[]
  productInnovations        ProductInnovation[]
  reviews                   Review[]
  services                  Service[]
  strategyAssessments       StrategyAssessment[]
  technologyImplementations TechnologyImplementation[]
  surveyResponses           SurveyResponse[]
}

model Industry {
  name        String
  description String
  id          Int       @id @default(autoincrement())
  companies   Company[]
}

model Survey {
  title           String
  description     String
  surveyJson      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expiresAt       DateTime?
  status          SurveyStatus     @default(DRAFT)
  targetResponses Int              @default(0)
  id              Int              @id @default(autoincrement())
  userId          Int
  industryId      Int              @default(72)
  responses       SurveyResponse[]
  user            User             @relation("SurveyCreator", fields: [userId], references: [id])

  @@index([userId, status])
  @@map("surveys")
}

model SurveyResponse {
  createdAt         DateTime  @default(now())
  responseJson      Json
  updatedAt         DateTime  @updatedAt
  id                Int       @id @default(autoincrement())
  surveyId          Int
  userId            Int
  processedMetrics  Json
  companyId         Int       @default(1)
  lastMetricsUpdate DateTime?
  metricsVersion    String?
  company           Company   @relation(fields: [companyId], references: [id])
  survey            Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user              User      @relation("SurveyResponseUser", fields: [userId], references: [id])

  @@index([surveyId, userId])
  @@index([companyId])
  @@map("responses")
}

model TechnologyType {
  id              Int                        @id @default(autoincrement())
  name            String                     @unique
  category        String
  description     String
  createdAt       DateTime                   @default(now())
  implementations TechnologyImplementation[]
}

model TechnologyImplementation {
  id                 Int            @id @default(autoincrement())
  companyId          Int
  technologyTypeId   Int
  implementationDate DateTime
  maturityLevel      Int
  status             String
  investmentAmount   Decimal
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  company            Company        @relation(fields: [companyId], references: [id])
  technologyType     TechnologyType @relation(fields: [technologyTypeId], references: [id])
}

model ProcessType {
  id          Int              @id @default(autoincrement())
  name        String
  category    String
  description String
  createdAt   DateTime         @default(now())
  processes   DigitalProcess[]
}

model DigitalProcess {
  id                 Int         @id @default(autoincrement())
  companyId          Int
  processTypeId      Int
  digitizationLevel  Int
  automationLevel    Int
  implementationDate DateTime
  lastAssessmentDate DateTime
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  company            Company     @relation(fields: [companyId], references: [id])
  processType        ProcessType @relation(fields: [processTypeId], references: [id])
}

model Skill {
  id              Int              @id @default(autoincrement())
  name            String
  category        String
  i40Relevance    Boolean
  description     String
  createdAt       DateTime         @default(now())
  personnelSkills PersonnelSkill[]
}

model PersonnelSkill {
  id                Int      @id @default(autoincrement())
  companyId         Int
  skillId           Int
  numberOfPersonnel Int
  proficiencyLevel  Int
  assessmentDate    DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id])
  skill             Skill    @relation(fields: [skillId], references: [id])
}

model StrategyAssessment {
  id                     Int      @id @default(autoincrement())
  companyId              Int
  assessmentDate         DateTime
  hasI40Strategy         Boolean
  strategyMaturity       Int
  implementationProgress Int
  nextReviewDate         DateTime
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  company                Company  @relation(fields: [companyId], references: [id])
}

model ProductInnovation {
  id                 Int      @id @default(autoincrement())
  companyId          Int
  smartFeaturesCount Int
  customizationLevel Int
  innovationDate     DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  company            Company  @relation(fields: [companyId], references: [id])
}

model TechnologyImplementationFact {
  id                         Int      @id @default(autoincrement())
  date                       DateTime
  companyId                  Int
  sectorId                   Int
  technologyCount            Int
  avgMaturityLevel           Decimal
  totalInvestment            Decimal
  implementationStatusCounts Json
  createdAt                  DateTime @default(now())
}

model ProcessDigitizationFact {
  id                   Int      @id @default(autoincrement())
  date                 DateTime
  companyId            Int
  sectorId             Int
  processId            Int
  avgDigitizationLevel Decimal
  avgAutomationLevel   Decimal
  processCount         Int
  createdAt            DateTime @default(now())
}

model PersonnelSkillsFact {
  id                    Int      @id @default(autoincrement())
  date                  DateTime
  companyId             Int
  sectorId              Int
  skillCategory         String
  totalSkilledPersonnel Int
  avgProficiencyLevel   Decimal
  createdAt             DateTime @default(now())
}

model StrategyImplementationFact {
  id                        Int      @id @default(autoincrement())
  date                      DateTime
  companyId                 Int
  sectorId                  Int
  companiesWithStrategy     Int
  avgStrategyMaturity       Decimal
  avgImplementationProgress Decimal
  createdAt                 DateTime @default(now())
}

model CompanyProject {
  name        String
  description String?
  latitude    Float?
  longitude   Float?
  capacityKw  Float?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  id          Int            @id @default(autoincrement())
  companyId   Int
  address     String?
  company     Company        @relation(fields: [companyId], references: [id])
  photos      ProjectPhoto[]
}

model ProjectPhoto {
  url       String
  caption   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  id        Int            @id @default(autoincrement())
  projectId Int
  project   CompanyProject @relation(fields: [projectId], references: [id])
}

model Certification {
  name       String
  issuedBy   String?
  issuedYear Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         Int      @id @default(autoincrement())
  companyId  Int
  company    Company  @relation(fields: [companyId], references: [id])
}

model Partnership {
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Service {
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Description {
  language  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Review {
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  userId    Int
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime           @default(now())
  status      ProjectStatus      @default(NOT_STARTED)
  updatedAt   DateTime           @updatedAt
  id          Int                @id @default(autoincrement())
  memberIds   Int[]
  equipment   ProjectEquipment[]
  tasks       Task[]
}

model Task {
  title        String
  description  String?
  dueDate      DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       TaskStatus   @default(NOT_STARTED)
  priority     TaskPriority @default(MEDIUM)
  id           Int          @id @default(autoincrement())
  projectId    Int
  assignedToId Int
  assignedTo   User         @relation("TaskAssignee", fields: [assignedToId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id])
}

model PVPanel {
  manufacturer        String
  modelNumber         String             @unique
  description         String?
  tempCoeffPmax       Float?
  tempCoeffIsc        Float?
  tempCoeffVoc        Float?
  tempCoeffIpmax      Float?
  tempCoeffVpmax      Float?
  moduleType          String?
  shortSide           Float?
  longSide            Float?
  weight              Float?
  performanceWarranty String?
  productWarranty     String?
  efficiency          Float?
  openCircuitVoltage  Float?
  shortCircuitCurrent Float?
  maxPower            Float?
  id                  Int                @id @default(autoincrement())
  certification       String?
  currentAtPmax       Float?
  voltageAtPmax       Float?
  projectEquipment    ProjectEquipment[] @relation("ProjectPVPanel")

  @@index([manufacturer, modelNumber])
}

model Inverter {
  id                      Int     @id @default(autoincrement())
  modelNumber             String  @unique
  description             String?
  manufacturer            String?
  
  // AC Output Parameters
  phaseType               String?  // Single-phase, Three-phase
  outputVoltage           Float?   // Nominal AC voltage
  nominalFrequency        Float?   // Nominal AC grid frequency
  maxOutputCurrent        Float?   // Max output current
  nominalOutputPower      Float?   // Nominal output power
  maxOutputPower          Float?   // Max AC active power
  maxApparentPower        Float?   // Max AC apparent power
  powerFactor             Float?   // Adjustable power factor range
  totalHarmonicDistortion Float?   // THDi (%)
  acGridConnectionType    String?  // Grid connection type
  
  // DC Input Parameters
  maxDcVoltage            Float?   // Max DC voltage
  startVoltage            Float?   // Start-up voltage
  nominalDcVoltage        Float?   // Nominal input voltage
  mpptVoltageRangeMin     Float?   // Min MPPT voltage
  mpptVoltageRangeMax     Float?   // Max MPPT voltage
  numberOfMpptTrackers    Int?     // Number of MPPT trackers
  stringsPerMppt          Int?     // Number of strings per MPPT
  maxInputCurrentPerMppt  Float?   // Max input current per MPPT
  maxShortCircuitCurrent  Float?   // Max short circuit current per MPPT
  maxRecommendedPvPower   Float?   // Max recommended PV power (STC)
  
  // Efficiency
  maxEfficiency           Float?   // Maximum efficiency (%)
  europeanEfficiency      Float?   // European efficiency (%)
  mpptEfficiency          Float?   // MPPT efficiency (%)
  
  // Physical & Environmental
  dimensions              String?  // Width x Height x Depth
  weight                  Float?   // Weight (kg)
  ipRating                String?  // IP rating (e.g., IP65)
  operatingTempRange      String?  // Operating temperature range
  coolingMethod           String?  // e.g., Natural convection, Fan
  noiseLevel              Float?   // Noise emission (dB)
  
  // Communication & Protection
  communicationInterfaces String?  // e.g., "RS485, WiFi, Ethernet"
  displayType             String?  // e.g., "LCD, LED indicators"
  protectionFeatures      String?  // e.g., "DC reverse polarity, Anti-islanding"
  
  // Certifications & Warranty
  certifications          String?  // e.g., "IEC 62109, G99, VDE-AR-N 4105"
  warrantyYears           Int?     // Standard warranty period
  projectEquipment ProjectEquipment[] @relation("ProjectInverter")

  @@index([manufacturer, modelNumber])
}

model MountingHardware {
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  manufacturer     String
  id               Int                @id @default(autoincrement())
  projectEquipment ProjectEquipment[] @relation("ProjectMountingHardware")

  @@index([manufacturer, modelNumber])
}

model ProtectionDevice {
  id                  Int                @id @default(autoincrement())
  maker               String
  refType             String
  circuitType         String
  equipmentType       String
  ratedCurrent        Float?
  ratedVoltage        Float?
  protectionLevel     String?
  nominalDischarge    String?
  shortCircuitCurrent Float?
  projectEquipment    ProjectEquipment[] @relation("ProjectProtectionDevice")

  @@index([maker, refType])
  @@index([circuitType, equipmentType])
  @@map("protection_equipment")
}

model Wire {
  modelNumber      String             @unique
  equipmentType    String?
  description      String?
  manufacturer     String
  id               Int                @id @default(autoincrement())
  projectEquipment ProjectEquipment[] @relation("ProjectWire")

  @@index([manufacturer, modelNumber])
}

model ProjectEquipment {
  equipmentType      EquipmentType
  quantity           Int               @default(1)
  position           Json?
  specifications     Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  id                 Int               @id @default(autoincrement())
  projectId          Int
  equipmentId        Int
  pvPanelId          Int?
  inverterId         Int?
  mountingHardwareId Int?
  wireId             Int?
  protectionDeviceId Int?
  inverter           Inverter?         @relation("ProjectInverter", fields: [inverterId], references: [id])
  mountingHardware   MountingHardware? @relation("ProjectMountingHardware", fields: [mountingHardwareId], references: [id])
  project            Project           @relation(fields: [projectId], references: [id])
  protectionDevice   ProtectionDevice? @relation("ProjectProtectionDevice", fields: [protectionDeviceId], references: [id])
  pvPanel            PVPanel?          @relation("ProjectPVPanel", fields: [pvPanelId], references: [id])
  wire               Wire?             @relation("ProjectWire", fields: [wireId], references: [id])

  @@unique([projectId, equipmentId, equipmentType])
  @@index([projectId])
  @@index([equipmentId])
}

enum UserRole {
  ADMIN
  USER
}

enum SurveyStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProjectStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EquipmentType {
  PV_PANEL
  INVERTER
  MOUNTING_HARDWARE
  MISC_EQUIPMENT
  WIRE
}
