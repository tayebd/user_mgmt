     
  //     const response = await Promise.race([fetchPromise, timeoutPromise]) as Response;
      
  //     console.log(`[API:${requestId}] Received response with status: ${response.status}`);
      
  //     if (!response.ok) {
  //       // For 404 errors, cache the failed lookup to avoid repeated calls
  //       if (response.status === 404) {
  //         failedLookupCache.set(uid, { timestamp: Date.now() });
  //         console.log(`[API:${requestId}] User not found, caching failed lookup for UID: ${uid}`);
  //         throw new Error(`USER_NOT_FOUND: User with UID ${uid} not found`);
  //       }
  //       throw new Error(`Failed to fetch user: ${response.status} ${response.statusText}`);
  //     }
      
  //     // Race the JSON parsing against a timeout to prevent hanging on malformed responses
  //     const jsonPromise = response.json();
  //     const jsonTimeoutPromise = new Promise((_, reject) => {
  //       setTimeout(() => {
  //         reject(new Error('JSON parsing timed out after 3 seconds'));
  //       }, 3000); // 3 second timeout for JSON parsing
  //     });
      
  //     const data = await Promise.race([jsonPromise, jsonTimeoutPromise]) as User;
      
  //     if (!data || !data.id) {
  //       console.error(`[API:${requestId}] Invalid user data received:`, data);
  //       throw new Error('Invalid user data received from server');
  //     }
      
  //     console.log(`[API:${requestId}] Successfully retrieved user data for UID: ${uid}`);
      
  //     // Cache the user data
  //     userCache[uid] = { user: data, timestamp: now };
      
  //     // Also cache by email for faster lookups
  //     if (data.email) {
  //       userEmailCache[data.email] = uid;
  //     }
      
  //     // Remove from failed lookup cache if it was there
  //     delete failedLookupCache[uid];
      
  //     console.log(`[API:${requestId}] Successfully fetched and cached user data:`, data.id);
  //     return data;
  //   } catch (error) {
  //     // Format the error for better debugging
  //     const errorMessage = error instanceof Error ? error.message : String(error);
  //     console.error(`[API:${requestId}] Error fetching user by UID: ${errorMessage}`);
      
  //     // For timeout errors, we want to return a specific error that the UI can handle
  //     if (errorMessage.includes('timed out')) {
  //       // Cache the timeout as a failed lookup to prevent immediate retries
  //       failedLookupCache.set(uid, { timestamp: Date.now() });
        
  //       // If we have cached data, return it even if expired as a fallback
  //       if (cachedData) {
  //         console.log(`[API:${requestId}] Returning expired cached user data as fallback after timeout`);
  //         return cachedData.user;
  //       }
        
  //       throw new Error(`TIMEOUT: Request timed out while fetching user with UID ${uid}`);
  //     }
      
  //     // For network errors, we also want to cache the failure to prevent immediate retries
  //     if (errorMessage.includes('NetworkError') || errorMessage.includes('network')) {
  //       failedLookupCache.set(uid, { timestamp: Date.now() });
        
  //       // If we have cached data, return it even if expired as a fallback
  //       if (cachedData) {
  //         console.log(`[API:${requestId}] Returning expired cached user data as fallback after network error`);
  //         return cachedData.user;
  //       }
        
  //       throw new Error(`NETWORK_ERROR: Network error while fetching user with UID ${uid}`);
  //     }
      
  //     // For other errors, still try to use cached data as fallback
  //     if (cachedData) {
  //       console.log(`[API:${requestId}] Returning expired cached user data as fallback`);
  //       return cachedData.user;
  //     }
      
  //     // Rethrow with clear error message
  //     if (error instanceof Error) {
  //       throw error;
  //     } else {
  //       throw new Error(`Unknown error fetching user: ${String(error)}`);
  //     }
  //   }
  // },
 

  //   const token = await getAuthToken();
  //   if (!token) {
  //     console.error('[API] Authentication required to find user by email');
  //     return null;
  //   }

  //   const controller = new AbortController();
  //   const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

  //   try {
  //     const response = await fetch(
  //       `${API_BASE_URL}/users/email/${encodeURIComponent(email)}`,
  //       {
  //         method: 'GET',
  //         headers: {
  //           'Authorization': `Bearer ${token}`,
  //           'Content-Type': 'application/json'
  //         },
  //         signal: controller.signal
  //       }
  //     );

  //     if (!response.ok) {
  //       if (response.status === 404) {
  //         return null;
  //       }
  //       throw new Error(`Failed to find user: ${response.status} ${response.statusText}`);
  //     }

  //     const responseData = await response.json();
  //     if (!isUser(responseData)) {
  //       throw new Error('Invalid user data structure');
  //     }

  //     // Update store with new user data
  //     const users = get().users;
  //     set({ users: [...users.filter((u: User) => u.uid !== responseData.uid), responseData] });

  //     return responseData;
  //   } finally {
  //     clearTimeout(timeoutId);
  //   }

  //     const token = await getAuthToken();
  //     if (!token) {
  //       console.error('[API] Authentication required to find user by email');
  //       return null;
  //     }

  //     const controller = new AbortController();
  //     const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

  //     try {
  //       const response = await fetch(
  //         `${API_BASE_URL}/users/email/${encodeURIComponent(email)}`,
  //         {
  //           method: 'GET',
  //           headers: {
  //             'Authorization': `Bearer ${token}`,
  //             'Content-Type': 'application/json'
  //           },
  //           signal: controller.signal
  //         }
  //       );

  //       if (!response.ok) {
  //         if (response.status === 404) {
  //           console.log('[API] No user found with email:', email);
  //           return null;
  //         }
  //         const errorMessage = `Failed to find user: ${response.status} ${response.statusText}`;
  //         console.error('[API]', errorMessage);
  //         throw new Error(errorMessage);
  //       }

  //       const data = await response.json();
  //       if (!data || !data.id || !data.email) {
  //         console.error(`[API:${requestId}] Invalid user data received:`, data);
  //         throw new Error('Invalid user data received from server');
  //       }

  //       console.log(`[API:${requestId}] Successfully found user with email: ${email}`);
  //       return data;
  //     } finally {
  //       clearTimeout(timeoutId);
  //     }
  //   } catch (error) {
  //     const errorMessage = error instanceof Error ? error.message : String(error);
  //     console.error(`[API:${requestId}] Error finding user by email: ${errorMessage}`);
      
  //     if (errorMessage.includes('timed out')) {
  //       throw new Error(`TIMEOUT: Request timed out while finding user with email ${email}`);
  //     }
  //     if (errorMessage.includes('NetworkError') || errorMessage.includes('network')) {
  //       throw new Error(`NETWORK_ERROR: Network error while finding user with email ${email}`);
  //     }
  //     throw error;
  //   }
      
  //     // Fetch all users - this is expensive but necessary
  //     // In the future, we should add a server endpoint to find by email directly
  //     const response = await fetch(`${API_BASE_URL}/users`, {
  //       method: 'GET',
  //       headers: {
  //         Authorization: `Bearer ${token}`,
  //       },
  //       credentials: 'include',
  //     });
      
  //     if (!response.ok) {
  //       console.error(`[API:${requestId}] Error fetching users: ${response.status}`);
  //       return null;
  //     }
      
  //     const users = await response.json();
  //     const matchingUser = users.find((u: User) => u.email === email);
      
  //     if (matchingUser) {
  //       console.log(`[API:${requestId}] Found user with email ${email}: ID ${matchingUser.id}`);
  //       // Cache the found user
  //       userCache[matchingUser.uid] = { 
  //         user: matchingUser, 
  //         timestamp: now 
  //       };
  //       userEmailCache[email] = matchingUser.uid;
        
  //       // Remove from failed lookup cache if it was there
  //       delete failedLookupCache[matchingUser.uid];
        
  //       return matchingUser;
  //     }
      
  //     console.log(`[API:${requestId}] No user found with email: ${email}`);
  //     // If we didn't find a user, we don't have a UID to cache as failed
  //     // But we could potentially add a separate cache for failed email lookups
  //   } catch (error) {
  //     console.error(`[API:${requestId}] Error finding user by email:`, error);
  //   }
    
  //   return null;
  // },
